name: CI-CD

on:
  push:
    branches: [ main, develop ]
    tags: [ "v*.*.*" ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}
  MODULES: '["user-events-producer","analytics-consumer"]'

jobs:
  test:
    name: Test ${{ matrix.module }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(env.MODULES) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - uses: gradle/actions/setup-gradle@v4
      - name: Build & test
        run: ./gradlew :${{ matrix.module }}:clean :${{ matrix.module }}:test :${{ matrix.module }}:build --no-daemon
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.module }}
          path: ${{ matrix.module }}/build/reports/tests/test

  qodana:
    name: Qodana JVM
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: JetBrains/qodana-action@v2025.2
        with:
          args: "--image jetbrains/qodana-jvm-community:2025.2"
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qodana-report
          path: .qodana

  image:
    name: Build & Push Image ${{ matrix.module }}
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(env.MODULES) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - uses: gradle/actions/setup-gradle@v4

      - name: Docker login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: tags
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.REPO }}-${{ matrix.module }}
          echo "img=$IMAGE" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "ver=${IMAGE}:${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "ver=${IMAGE}:latest" >> $GITHUB_OUTPUT
          fi
          echo "sha=${IMAGE}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build image (prefer Buildpacks)
        run: |
          if ./gradlew :${{ matrix.module }}:tasks --all | grep -q bootBuildImage; then
            ./gradlew :${{ matrix.module }}:bootBuildImage -PimageName=${{ steps.tags.outputs.sha }} --no-daemon
          else
            ./gradlew :${{ matrix.module }}:build --no-daemon
            docker build -t ${{ steps.tags.outputs.sha }} ${{ matrix.module }}
          fi
          docker tag ${{ steps.tags.outputs.sha }} ${{ steps.tags.outputs.ver }}
          docker push ${{ steps.tags.outputs.sha }}
          docker push ${{ steps.tags.outputs.ver }}

  deploy:
    name: Deploy (docker compose on host)
    runs-on: ubuntu-latest
    needs: [image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Copy compose
        run: scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/kafka-lab/docker-compose.yml
      - name: Pull & Up
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            docker login ghcr.io -u '"$GITHUB_ACTOR"' -p '"$GITHUB_TOKEN"' &&
            cd /opt/kafka-lab &&
            docker compose pull &&
            docker compose up -d &&
            docker system prune -f
          '
